{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "rawDataSQL",
						"type": "DatasetReference"
					},
					"name": "rawDataSQL"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SaleDate",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sinkFinance"
				},
				{
					"dataset": {
						"referenceName": "PropertySpecs",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "SaleDate",
					"description": "Select columns 'Id, MonthSold, YearSold'"
				},
				{
					"name": "FinancialDetails",
					"description": "Select columns 'Id, SaleType, SalePrice'"
				},
				{
					"name": "PropertySpecs",
					"description": "Select columns 'Id, YearBuilt, YearRemodAdd, OverallCond'"
				},
				{
					"name": "GroupBySaleType",
					"description": "Add aggregate columns SaleType"
				},
				{
					"name": "OriginalData"
				},
				{
					"name": "join1"
				},
				{
					"name": "removeDuplicateColumns"
				},
				{
					"name": "aggByYear"
				},
				{
					"name": "aggByMonthAndYear"
				},
				{
					"name": "join2"
				},
				{
					"name": "removeDuplicateColumns1",
					"description": "Remove YearSold duplicate column"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "OriginalDataSaleDate"
				},
				{
					"name": "AlterRow2"
				},
				{
					"name": "join3"
				},
				{
					"name": "AlterRow3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as integer,",
				"          MSSubClass as integer,",
				"          MSZoning as string,",
				"          LotFrontage as integer,",
				"          LotArea as integer,",
				"          Street as string,",
				"          Alley as string,",
				"          LotShape as string,",
				"          LandContour as string,",
				"          Utilities as string,",
				"          LotConfig as string,",
				"          LandSlope as string,",
				"          Neighborhood as string,",
				"          Condition1 as string,",
				"          Condition2 as string,",
				"          BldgType as string,",
				"          HouseStyle as string,",
				"          OverallQual as integer,",
				"          OverallCond as integer,",
				"          YearBuilt as integer,",
				"          YearRemodAdd as integer,",
				"          RoofStyle as string,",
				"          RoofMatl as string,",
				"          Exterior1st as string,",
				"          Exterior2nd as string,",
				"          MasVnrType as string,",
				"          MasVnrArea as integer,",
				"          ExterQual as string,",
				"          ExterCond as string,",
				"          Foundation as string,",
				"          BsmtQual as string,",
				"          BsmtCond as string,",
				"          BsmtExposure as string,",
				"          BsmtFinType1 as string,",
				"          BsmtFinSF1 as integer,",
				"          BsmtFinType2 as string,",
				"          BsmtFinSF2 as integer,",
				"          BsmtUnfSF as integer,",
				"          TotalBsmtSF as integer,",
				"          Heating as string,",
				"          HeatingQC as string,",
				"          CentralAir as string,",
				"          Electrical as string,",
				"          FirstFlrSF as integer,",
				"          SecondFlrSF as integer,",
				"          LowQualFinSF as integer,",
				"          GrLivArea as integer,",
				"          BsmtFullBath as integer,",
				"          BsmtHalfBath as integer,",
				"          FullBath as integer,",
				"          HalfBath as integer,",
				"          BedroomAbvGr as integer,",
				"          KitchenAbvGr as integer,",
				"          KitchenQual as string,",
				"          TotRmsAbvGrd as integer,",
				"          Functional as string,",
				"          Fireplaces as integer,",
				"          FireplaceQu as string,",
				"          GarageType as string,",
				"          GarageYrBlt as integer,",
				"          GarageFinish as string,",
				"          GarageCars as integer,",
				"          GarageArea as integer,",
				"          GarageQual as string,",
				"          GarageCond as string,",
				"          PavedDrive as string,",
				"          WoodDeckSF as integer,",
				"          OpenPorchSF as integer,",
				"          EnclosedPorch as integer,",
				"          ThreeSsnPorch as integer,",
				"          ScreenPorch as integer,",
				"          PoolArea as integer,",
				"          PoolQC as string,",
				"          Fence as string,",
				"          MiscFeature as string,",
				"          MiscVal as integer,",
				"          MoSold as integer,",
				"          YrSold as integer,",
				"          SaleType as string,",
				"          SaleCondition as string,",
				"          SalePrice as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> rawDataSQL",
				"rawDataSQL select(mapColumn(",
				"          Id,",
				"          MonthSold = MoSold,",
				"          YearSold = YrSold",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SaleDate",
				"rawDataSQL select(mapColumn(",
				"          Id,",
				"          SaleType,",
				"          SalePrice",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinancialDetails",
				"rawDataSQL select(mapColumn(",
				"          Id,",
				"          YearBuilt,",
				"          YearRemodAdd,",
				"          OverallCond,",
				"          LotArea",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PropertySpecs",
				"FinancialDetails aggregate(groupBy(SaleType),",
				"     CountBySaleType = count()) ~> GroupBySaleType",
				"FinancialDetails select(mapColumn(",
				"          Id,",
				"          SaleType,",
				"          SalePrice",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OriginalData",
				"OriginalData, GroupBySaleType join(OriginalData@SaleType == GroupBySaleType@SaleType,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          Id,",
				"          SalePrice,",
				"          SaleType = OriginalData@SaleType,",
				"          CountBySaleType",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeDuplicateColumns",
				"SaleDate aggregate(groupBy(YearSold),",
				"     TotalCountByYear = count()) ~> aggByYear",
				"SaleDate aggregate(groupBy(MonthSold,",
				"          YearSold),",
				"     CountByMonthAndYear = count()) ~> aggByMonthAndYear",
				"aggByMonthAndYear, aggByYear join(aggByMonthAndYear@YearSold == aggByYear@YearSold,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          MonthSold,",
				"          YearSold = aggByMonthAndYear@YearSold,",
				"          CountByMonthAndYear,",
				"          TotalCountByYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeDuplicateColumns1",
				"removeDuplicateColumns alterRow(upsertIf(true())) ~> AlterRow1",
				"SaleDate select(mapColumn(",
				"          Id,",
				"          MonthSold,",
				"          YearSold",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OriginalDataSaleDate",
				"removeDuplicateColumns1 alterRow(upsertIf(true())) ~> AlterRow2",
				"OriginalDataSaleDate, aggByYear join(OriginalDataSaleDate@YearSold == aggByYear@YearSold,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 alterRow(upsertIf(true())) ~> AlterRow3",
				"AlterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['MonthSold','YearSold'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['Id','SaleType'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkFinance",
				"PropertySpecs sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink3",
				"AlterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['Id','MonthSold','YearSold'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink4"
			]
		}
	}
}